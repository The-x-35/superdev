diff --git a/Cargo.lock b/Cargo.lock
index f031d47..3d2b01d 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -232,6 +232,7 @@ dependencies = [
  "jsonwebtoken",
  "serde",
  "serde_json",
+ "traity_trait_macro",
 ]
 
 [[package]]
@@ -1365,6 +1366,16 @@ dependencies = [
  "once_cell",
 ]
 
+[[package]]
+name = "traity_trait_macro"
+version = "0.1.0"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "serde",
+ "syn",
+]
+
 [[package]]
 name = "typenum"
 version = "1.18.0"
diff --git a/Cargo.toml b/Cargo.toml
index b218545..ccb8e38 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -8,3 +8,4 @@ actix-web = "4.11.0"
 jsonwebtoken = "9.3.1"
 serde = {version = "1.0.219", features = ["derive"]}
 serde_json = {version = "1.0.140"}
+traity_trait_macro = { path = "./trait_trait" }
diff --git a/src/db/mod.rs b/src/db/mod.rs
index c7ca32a..eb34e80 100644
--- a/src/db/mod.rs
+++ b/src/db/mod.rs
@@ -34,10 +34,10 @@ impl Db {
     pub fn create_user(&mut self, username: String, password: String, role: UserRole) -> String {
         self.users.push(User {
             id: self.index.to_string(),
+            role,
             username,
             password,
-            todos: vec![],
-            role: UserRole::User,
+            todos: vec![]
         });
         self.index = self.index + 1;
         (self.index - 1).to_string()
diff --git a/src/routes/todo.rs b/src/routes/todo.rs
index a533957..076bc97 100644
--- a/src/routes/todo.rs
+++ b/src/routes/todo.rs
@@ -3,20 +3,21 @@ use std::sync::{Arc, Mutex};
 use actix_web::web::{Data, Json};
 use actix_web::{HttpResponse, Responder, get, post};
 use serde::{Serialize, Deserialize};
+use traity_trait_macro::todo_app;
 use crate::middleware::UserId;
 use crate::db::Db;
 
-#[derive(Serialize, Deserialize)]
+#[todo_app]
 struct CreateTodoResponse {
     message: String
 }
 
-#[derive(Serialize, Deserialize)]
+#[todo_app]
 struct CreateTodoRequest {
     pub text: String
 }
 
-#[derive(Serialize, Deserialize)]
+#[todo_app]
 struct GetTodosResponse {
     todos: Vec<String>
 }
diff --git a/src/routes/user.rs b/src/routes/user.rs
index 19b4f01..00dfdff 100644
--- a/src/routes/user.rs
+++ b/src/routes/user.rs
@@ -3,21 +3,22 @@ use std::sync::{Arc, Mutex};
 use actix_web::{web::{Data, Json}, HttpResponse, Responder};
 use jsonwebtoken::{encode, EncodingKey, Header};
 use serde::{Serialize, Deserialize};
+use traity_trait_macro::todo_app;
 use actix_web::{post};
 
 use crate::db::{self, UserRole};
 
-#[derive(Serialize, Deserialize)]
+#[todo_app]
 struct GetUsersResponse {
     users: Vec<db::User>
 }
 
-#[derive(Serialize, Deserialize)]
+#[todo_app]
 struct CreateUserResponse {
     id: String
 }
 
-#[derive(Serialize, Deserialize)]
+#[todo_app]
 struct SigninResponse {
     token: String
 }
@@ -28,7 +29,7 @@ pub struct Claims {
     pub exp: usize,
 }
 
-#[derive(Serialize, Deserialize)]
+#[todo_app]
 struct CreateUserRequest {
     username: String,
     password: String,

=== NEW UNTRACKED FILES ===
diff --git a/all_changes.patch b/all_changes.patch
new file mode 100644
index 0000000..6ddcdb4
--- /dev/null
+++ b/all_changes.patch
@@ -0,0 +     130,0 @@
+diff --git a/Cargo.lock b/Cargo.lock
+index f031d47..3d2b01d 100644
+--- a/Cargo.lock
++++ b/Cargo.lock
+@@ -232,6 +232,7 @@ dependencies = [
+  "jsonwebtoken",
+  "serde",
+  "serde_json",
++ "traity_trait_macro",
+ ]
+ 
+ [[package]]
+@@ -1365,6 +1366,16 @@ dependencies = [
+  "once_cell",
+ ]
+ 
++[[package]]
++name = "traity_trait_macro"
++version = "0.1.0"
++dependencies = [
++ "proc-macro2",
++ "quote",
++ "serde",
++ "syn",
++]
++
+ [[package]]
+ name = "typenum"
+ version = "1.18.0"
+diff --git a/Cargo.toml b/Cargo.toml
+index b218545..ccb8e38 100644
+--- a/Cargo.toml
++++ b/Cargo.toml
+@@ -8,3 +8,4 @@ actix-web = "4.11.0"
+ jsonwebtoken = "9.3.1"
+ serde = {version = "1.0.219", features = ["derive"]}
+ serde_json = {version = "1.0.140"}
++traity_trait_macro = { path = "./trait_trait" }
+diff --git a/src/db/mod.rs b/src/db/mod.rs
+index c7ca32a..eb34e80 100644
+--- a/src/db/mod.rs
++++ b/src/db/mod.rs
+@@ -34,10 +34,10 @@ impl Db {
+     pub fn create_user(&mut self, username: String, password: String, role: UserRole) -> String {
+         self.users.push(User {
+             id: self.index.to_string(),
++            role,
+             username,
+             password,
+-            todos: vec![],
+-            role: UserRole::User,
++            todos: vec![]
+         });
+         self.index = self.index + 1;
+         (self.index - 1).to_string()
+diff --git a/src/routes/todo.rs b/src/routes/todo.rs
+index a533957..076bc97 100644
+--- a/src/routes/todo.rs
++++ b/src/routes/todo.rs
+@@ -3,20 +3,21 @@ use std::sync::{Arc, Mutex};
+ use actix_web::web::{Data, Json};
+ use actix_web::{HttpResponse, Responder, get, post};
+ use serde::{Serialize, Deserialize};
++use traity_trait_macro::todo_app;
+ use crate::middleware::UserId;
+ use crate::db::Db;
+ 
+-#[derive(Serialize, Deserialize)]
++#[todo_app]
+ struct CreateTodoResponse {
+     message: String
+ }
+ 
+-#[derive(Serialize, Deserialize)]
++#[todo_app]
+ struct CreateTodoRequest {
+     pub text: String
+ }
+ 
+-#[derive(Serialize, Deserialize)]
++#[todo_app]
+ struct GetTodosResponse {
+     todos: Vec<String>
+ }
+diff --git a/src/routes/user.rs b/src/routes/user.rs
+index 19b4f01..00dfdff 100644
+--- a/src/routes/user.rs
++++ b/src/routes/user.rs
+@@ -3,21 +3,22 @@ use std::sync::{Arc, Mutex};
+ use actix_web::{web::{Data, Json}, HttpResponse, Responder};
+ use jsonwebtoken::{encode, EncodingKey, Header};
+ use serde::{Serialize, Deserialize};
++use traity_trait_macro::todo_app;
+ use actix_web::{post};
+ 
+ use crate::db::{self, UserRole};
+ 
+-#[derive(Serialize, Deserialize)]
++#[todo_app]
+ struct GetUsersResponse {
+     users: Vec<db::User>
+ }
+ 
+-#[derive(Serialize, Deserialize)]
++#[todo_app]
+ struct CreateUserResponse {
+     id: String
+ }
+ 
+-#[derive(Serialize, Deserialize)]
++#[todo_app]
+ struct SigninResponse {
+     token: String
+ }
+@@ -28,7 +29,7 @@ pub struct Claims {
+     pub exp: usize,
+ }
+ 
+-#[derive(Serialize, Deserialize)]
++#[todo_app]
+ struct CreateUserRequest {
+     username: String,
+     password: String,
+
+=== NEW UNTRACKED FILES ===
+diff --git a/all_changes.patch b/all_changes.patch
+new file mode 100644
+index 0000000..6ddcdb4
+--- /dev/null
++++ b/all_changes.patch
+@@ -0,0 +     130,0 @@

diff --git a/trait_trait/Cargo.lock b/trait_trait/Cargo.lock
new file mode 100644
index 0000000..1908eb9
--- /dev/null
+++ b/trait_trait/Cargo.lock
@@ -0,0 +      68,0 @@
+# This file is automatically @generated by Cargo.
+# It is not intended for manual editing.
+version = 4
+
+[[package]]
+name = "proc-macro2"
+version = "1.0.95"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "02b3e5e68a3a1a02aad3ec490a98007cbc13c37cbe84a3cd7b8e406d76e7f778"
+dependencies = [
+ "unicode-ident",
+]
+
+[[package]]
+name = "quote"
+version = "1.0.40"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1885c039570dc00dcb4ff087a89e185fd56bae234ddc7f056a945bf36467248d"
+dependencies = [
+ "proc-macro2",
+]
+
+[[package]]
+name = "serde"
+version = "1.0.219"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
+dependencies = [
+ "serde_derive",
+]
+
+[[package]]
+name = "serde_derive"
+version = "1.0.219"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "syn",
+]
+
+[[package]]
+name = "syn"
+version = "2.0.104"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "17b6f705963418cdb9927482fa304bc562ece2fdd4f616084c50b7023b435a40"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "unicode-ident",
+]
+
+[[package]]
+name = "traity_trait_macro"
+version = "0.1.0"
+dependencies = [
+ "proc-macro2",
+ "quote",
+ "serde",
+ "syn",
+]
+
+[[package]]
+name = "unicode-ident"
+version = "1.0.18"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5a5f39404a5da50712a4c1eecf25e90dd62b613502b7e925fd4e4d19b5c96512"

diff --git a/trait_trait/Cargo.toml b/trait_trait/Cargo.toml
new file mode 100644
index 0000000..f88580d
--- /dev/null
+++ b/trait_trait/Cargo.toml
@@ -0,0 +      12,0 @@
+[package]
+name = "traity_trait_macro"
+version = "0.1.0"
+edition = "2021"
+
+[lib]
+proc-macro = true
+
+[dependencies]
+proc-macro2 = "1.0"
+quote = "1.0"
+syn = { version = "2.0", features = ["full"] }
+serde = { version = "1.0", features = ["derive"] } 
diff --git a/trait_trait/src/lib.rs b/trait_trait/src/lib.rs
new file mode 100644
index 0000000..5df2b02
--- /dev/null
+++ b/trait_trait/src/lib.rs
@@ -0,0 +      54,0 @@
+use proc_macro::TokenStream;
+use quote::quote;
+use syn::{parse_macro_input, DeriveInput, Data};
+
+#[proc_macro_attribute]
+pub fn todo_app(_attr: TokenStream, item: TokenStream) -> TokenStream {
+    let input = parse_macro_input!(item as DeriveInput);
+    let name = input.ident;
+    
+    let fields = match input.data {
+        Data::Struct(data) => data.fields,
+        _ => panic!("todo_app can only be applied to structs"),
+    };
+    
+    let field_attrs: Vec<_> = fields.iter().map(|field| {
+        let field_name = &field.ident;
+        let field_type = &field.ty;
+        let pascal_case_name = to_pascal_case(&field_name.as_ref().unwrap().to_string());
+        let todo_app_name = format!("TodoApp{}", pascal_case_name);
+        
+        quote! {
+            #[serde(rename = #todo_app_name)]
+            #field_name: #field_type
+        }
+    }).collect();
+    
+    let output = quote! {
+        #[derive(serde::Serialize, serde::Deserialize)]
+        pub struct #name {
+            #(#field_attrs),*
+        }
+    };
+    
+    output.into()
+}
+
+fn to_pascal_case(s: &str) -> String {
+    let mut result = String::new();
+    let mut capitalize_next = true;
+    
+    for c in s.chars() {
+        if c == '_' {
+            capitalize_next = true;
+        } else {
+            if capitalize_next {
+                result.push(c.to_ascii_uppercase());
+                capitalize_next = false;
+            } else {
+                result.push(c);
+            }
+        }
+    }
+    
+    result
+} 
